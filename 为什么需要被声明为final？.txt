因为这是Java语言规范，现在使用的Java8就不存在这种问题。
以下为分析解释：
内部类可以大致分为两类：成员内部类和局部内部类。

顾名思义，其中，定义在成员位置处的类为成员内部类，
而定义在局部位置处的类为局部内部类。
题主说的系属成员内部类。

当使用成员内部类时，
它可以直接访问外类的变量（public、默认、private权限修饰符修饰的），
不会出现问题；而在使用它访问局部变量时，Java8以前的版本会报错：
从内部类中访问本地变量a，需要被声明为最终类型。
这时候你在变量前面加个状态修饰符final，就能正常运行了。

我们知道，当方法调用完以后，方法就会被当作垃圾而被回收，
可是局部内部类创建的对象在堆内存，它并不会立即消失，
相反，它仍存在，并且仍在调用局部变量，这显然与局部变量已被销毁矛盾。
这时候Java语言提供了一个巧妙的解决办法，用状态修饰符final修饰该变量，
从而该变量成了常量，解决了这个问题。
至于Java8为什么不存在这个问题，我现在也不清楚。


作者：何处有香丘
链接：https://www.zhihu.com/question/39397230/answer/126425727

来源：知乎
著作权归作者所有，转载请联系作者获得授权。