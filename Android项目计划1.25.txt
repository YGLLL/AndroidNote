1.25
12点前完成service
下午完成最后一章

6.23
确定了教材：http://hukai.me/android-training-course-in-chinese/index.html
确定了计划：每天学完教材的一点
更详细的计划日后补充

6.24
完成了1.1.3

6.25
完成了1.1.4

startActivity(intent);
//发送一个intent
intent.putExtra(EXTRA_MESSAGE, message);
//一个Activity，可以监听到多个消息，哪个是需要接收的呢？
//第一个参数用于确定发送接收者
//第二个参数是内容

6.26
了解了android.support.v7.widget.Toolbar
Toolbar就是大多数应用的界面的上边的工具栏

6.27
向Toolbar添加了控件

7.1
你可以向toolbar添加按钮，并且可以设置按钮的出现方式
在按钮代码中（目前是menu文件夹下的menu_main.xml），
增加app:showAsAction="never"这条代码，
可以将你的按钮放进toolbar右边的三个点中
改成app:showAsAction="always"这条代码，
可以将你的按钮固定在toolbar

完成toolbar按键响应事件

7.2
app:popupTheme，这个属性就是用来自定义我们弹出的菜单的样式
实现了toolbar透明化

7.3
onCreate()函数是在activity初始化的时候调用的

略读了1.4

7.6
android:name属性：指定关联的类？
创建了Fragment

7.10
Preference直译为偏好，博友建议翻译为首选项。
一些配置数据，一些我们上次点击选择的内容，
我们希望在下次应用调起的时候依然有效，无须用户再一次进行配置或选择。
Android提供preference这个键值对的方式来处理这种情况，自动保存这些数据，
并立时生效，同时Android提供一种类似的layout的方式来进行Prefernce的布局。

7.13
在设备没有root的情况下，文件夹/data下的内容是隐藏的

使应用在设备上保存了文件，完成了1.6.2

7.14
完成了1.7.1

7.17
首先，URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。
而URL是uniform resource locator，统一资源定位器，它是一种具体的URI，
即URL可以用来标识一个资源，而且还指明了如何locate这个资源。
而URN，uniform resource name，统一资源命名，是通过名字来标识资源，
比如mailto:java-net@java.sun.com。
也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，
而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。

7.18
android中使用布局是为了加快开发，最终控件还是通过解析XML后，通过代码添加的。

12.12
1、将jar包放入项目里的libs文件夹中。 
2、在project选中jar包点击右键"Add as library"。 
3、这两步是网上比较容易找到的，但此时项目仍然是无法正常编译的，这时需要在项目的build.gradle文件里的dependencies节加入 dependencies 
{ 
compile files('libs/android-support-v4.jar')
compile files('libs/xxxx.jar') 
} 
4、此时项目正常编译并运行了，但当你的代码中真正创建了引用jar里的类实例时，有可能系统会抛出异常NoClassDefFoundError，这个时候可以按以下步骤操作： 

? 进入命令提示符窗口。 
? 定位到项目的根目录，即build.gradle所在的目录。 
? 运行 "{android studio 安装目录}\sdk\tools\templates\gradle\wrapper\gradlew.bat" clean 
? 重新编译运行项目 

通过以上操作，应该可以解决问题。

12.23
使 用android:layout_width 指定控件的宽度，使用 android:layout_height 指定控件的高
度。Android 中所有的控件都具有这两个属性，可选值有三种 match_parent、fill_parent
和 wrap_content，其中 match_parent 和 fill_parent 的意义相同，现在官方更加推荐使
用 match_parent。match_parent 表示让当前控件的大小和父布局的大小一样，也就是
由父布局来决定当前控件的大小。 wrap_content 表示让当前控件的大小能够刚好包含住里
面的内容，也就是由控件内容决定当前控件的大小。
当然除了使用上述值，你也可以对控件的宽和高指定一个固定的大小，但是这样做有
时会在不同手机屏幕的适配方面出现问题。

ListView 中用到了一个
android:divider 属性，它可以指定 ListView 分隔线的颜色，这里#0000 表示将分隔线设
为透明色。